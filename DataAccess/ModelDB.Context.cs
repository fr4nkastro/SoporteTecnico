//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBEntities : DbContext
    {
        public DBEntities()
            : base("name=DBEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CLIENTE> CLIENTE { get; set; }
        public virtual DbSet<CONTRATOS> CONTRATOS { get; set; }
        public virtual DbSet<DETALLE_FACTURA_SERVICIO> DETALLE_FACTURA_SERVICIO { get; set; }
        public virtual DbSet<DETALLE_ORDEN_TRABAJO> DETALLE_ORDEN_TRABAJO { get; set; }
        public virtual DbSet<DETALLE_PAQUETE> DETALLE_PAQUETE { get; set; }
        public virtual DbSet<DISPONIBILIDAD_TECNICOS> DISPONIBILIDAD_TECNICOS { get; set; }
        public virtual DbSet<FACTURA_SERVICIO> FACTURA_SERVICIO { get; set; }
        public virtual DbSet<ORDEN_TRABAJO> ORDEN_TRABAJO { get; set; }
        public virtual DbSet<SERVICIOS> SERVICIOS { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TECNICOS> TECNICOS { get; set; }
        public virtual DbSet<DETALLE_CONTRATO> DETALLE_CONTRATO { get; set; }
        public virtual DbSet<viewClientesActivos> viewClientesActivos { get; set; }
        public virtual DbSet<viewClientesInactivos> viewClientesInactivos { get; set; }
        public virtual DbSet<viewClientesxTecnico> viewClientesxTecnico { get; set; }
        public virtual DbSet<viewContratacionxPaquete> viewContratacionxPaquete { get; set; }
        public virtual DbSet<viewContratoMasContratado> viewContratoMasContratado { get; set; }
        public virtual DbSet<viewGananciasxPaquetes> viewGananciasxPaquetes { get; set; }
        public virtual DbSet<viewServiciosFueraDePaquetes> viewServiciosFueraDePaquetes { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spAddCliente(string nombre, string estado, string rTN, string telefono, string direccion)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var rTNParameter = rTN != null ?
                new ObjectParameter("RTN", rTN) :
                new ObjectParameter("RTN", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddCliente", nombreParameter, estadoParameter, rTNParameter, telefonoParameter, direccionParameter);
        }
    
        public virtual int spAddContrato(Nullable<decimal> clienteID, Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechafinal, Nullable<decimal> tecnicoID, Nullable<int> retrasos)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("clienteID", clienteID) :
                new ObjectParameter("clienteID", typeof(decimal));
    
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("fechaInicio", fechaInicio) :
                new ObjectParameter("fechaInicio", typeof(System.DateTime));
    
            var fechafinalParameter = fechafinal.HasValue ?
                new ObjectParameter("fechafinal", fechafinal) :
                new ObjectParameter("fechafinal", typeof(System.DateTime));
    
            var tecnicoIDParameter = tecnicoID.HasValue ?
                new ObjectParameter("tecnicoID", tecnicoID) :
                new ObjectParameter("tecnicoID", typeof(decimal));
    
            var retrasosParameter = retrasos.HasValue ?
                new ObjectParameter("retrasos", retrasos) :
                new ObjectParameter("retrasos", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddContrato", clienteIDParameter, fechaInicioParameter, fechafinalParameter, tecnicoIDParameter, retrasosParameter);
        }
    
        public virtual int spAddDetalleContrato(Nullable<decimal> contratoID, Nullable<decimal> servicioID, Nullable<int> cantidad, Nullable<int> realizado)
        {
            var contratoIDParameter = contratoID.HasValue ?
                new ObjectParameter("contratoID", contratoID) :
                new ObjectParameter("contratoID", typeof(decimal));
    
            var servicioIDParameter = servicioID.HasValue ?
                new ObjectParameter("servicioID", servicioID) :
                new ObjectParameter("servicioID", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var realizadoParameter = realizado.HasValue ?
                new ObjectParameter("realizado", realizado) :
                new ObjectParameter("realizado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddDetalleContrato", contratoIDParameter, servicioIDParameter, cantidadParameter, realizadoParameter);
        }
    
        public virtual int spAddDetalleFactura(Nullable<decimal> facturaID, Nullable<double> precio, Nullable<double> isv, Nullable<int> cantidad, Nullable<double> total, Nullable<int> servicioID)
        {
            var facturaIDParameter = facturaID.HasValue ?
                new ObjectParameter("facturaID", facturaID) :
                new ObjectParameter("facturaID", typeof(decimal));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(double));
    
            var isvParameter = isv.HasValue ?
                new ObjectParameter("isv", isv) :
                new ObjectParameter("isv", typeof(double));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(double));
    
            var servicioIDParameter = servicioID.HasValue ?
                new ObjectParameter("servicioID", servicioID) :
                new ObjectParameter("servicioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddDetalleFactura", facturaIDParameter, precioParameter, isvParameter, cantidadParameter, totalParameter, servicioIDParameter);
        }
    
        public virtual int spAddDetalleOrdenTrabajo(Nullable<decimal> ordentrabajoid, Nullable<decimal> tecnicoid, Nullable<decimal> servicioid, Nullable<int> cantidad, Nullable<decimal> contratoID)
        {
            var ordentrabajoidParameter = ordentrabajoid.HasValue ?
                new ObjectParameter("ordentrabajoid", ordentrabajoid) :
                new ObjectParameter("ordentrabajoid", typeof(decimal));
    
            var tecnicoidParameter = tecnicoid.HasValue ?
                new ObjectParameter("tecnicoid", tecnicoid) :
                new ObjectParameter("tecnicoid", typeof(decimal));
    
            var servicioidParameter = servicioid.HasValue ?
                new ObjectParameter("servicioid", servicioid) :
                new ObjectParameter("servicioid", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var contratoIDParameter = contratoID.HasValue ?
                new ObjectParameter("contratoID", contratoID) :
                new ObjectParameter("contratoID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddDetalleOrdenTrabajo", ordentrabajoidParameter, tecnicoidParameter, servicioidParameter, cantidadParameter, contratoIDParameter);
        }
    
        public virtual int spAddDetallePaquete(Nullable<int> servicioId, Nullable<int> paqueteId)
        {
            var servicioIdParameter = servicioId.HasValue ?
                new ObjectParameter("ServicioId", servicioId) :
                new ObjectParameter("ServicioId", typeof(int));
    
            var paqueteIdParameter = paqueteId.HasValue ?
                new ObjectParameter("PaqueteId", paqueteId) :
                new ObjectParameter("PaqueteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddDetallePaquete", servicioIdParameter, paqueteIdParameter);
        }
    
        public virtual int spAddDisponibilidadTecnico(Nullable<decimal> tecnicoID, string estado, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta)
        {
            var tecnicoIDParameter = tecnicoID.HasValue ?
                new ObjectParameter("tecnicoID", tecnicoID) :
                new ObjectParameter("tecnicoID", typeof(decimal));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddDisponibilidadTecnico", tecnicoIDParameter, estadoParameter, desdeParameter, hastaParameter);
        }
    
        public virtual int spAddFacturaServicio(Nullable<System.DateTime> fecha, Nullable<decimal> clienteID, string estado, Nullable<decimal> ordenId)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("clienteID", clienteID) :
                new ObjectParameter("clienteID", typeof(decimal));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var ordenIdParameter = ordenId.HasValue ?
                new ObjectParameter("ordenId", ordenId) :
                new ObjectParameter("ordenId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddFacturaServicio", fechaParameter, clienteIDParameter, estadoParameter, ordenIdParameter);
        }
    
        public virtual int spAddNuevoContrato(Nullable<decimal> clienteId, Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechafinal, Nullable<decimal> tecnicoID, Nullable<decimal> servicioID)
        {
            var clienteIdParameter = clienteId.HasValue ?
                new ObjectParameter("ClienteId", clienteId) :
                new ObjectParameter("ClienteId", typeof(decimal));
    
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("fechaInicio", fechaInicio) :
                new ObjectParameter("fechaInicio", typeof(System.DateTime));
    
            var fechafinalParameter = fechafinal.HasValue ?
                new ObjectParameter("fechafinal", fechafinal) :
                new ObjectParameter("fechafinal", typeof(System.DateTime));
    
            var tecnicoIDParameter = tecnicoID.HasValue ?
                new ObjectParameter("tecnicoID", tecnicoID) :
                new ObjectParameter("tecnicoID", typeof(decimal));
    
            var servicioIDParameter = servicioID.HasValue ?
                new ObjectParameter("servicioID", servicioID) :
                new ObjectParameter("servicioID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddNuevoContrato", clienteIdParameter, fechaInicioParameter, fechafinalParameter, tecnicoIDParameter, servicioIDParameter);
        }
    
        public virtual int spAddOrdenDeTrabajo(Nullable<decimal> clienteID, Nullable<System.DateTime> fechainicio, Nullable<System.DateTime> fechafinal, string estado)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(decimal));
    
            var fechainicioParameter = fechainicio.HasValue ?
                new ObjectParameter("fechainicio", fechainicio) :
                new ObjectParameter("fechainicio", typeof(System.DateTime));
    
            var fechafinalParameter = fechafinal.HasValue ?
                new ObjectParameter("fechafinal", fechafinal) :
                new ObjectParameter("fechafinal", typeof(System.DateTime));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddOrdenDeTrabajo", clienteIDParameter, fechainicioParameter, fechafinalParameter, estadoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spAddServicioNuevoAPaquete(string nombre, Nullable<double> precio, Nullable<decimal> paqueteID)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(double));
    
            var paqueteIDParameter = paqueteID.HasValue ?
                new ObjectParameter("PaqueteID", paqueteID) :
                new ObjectParameter("PaqueteID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAddServicioNuevoAPaquete", nombreParameter, precioParameter, paqueteIDParameter);
        }
    
        public virtual int spAddServicios(string nombre, Nullable<double> precio, string tipo)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(double));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddServicios", nombreParameter, precioParameter, tipoParameter);
        }
    
        public virtual int spAddTecnico(string nombre, string telefono, string area)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("area", area) :
                new ObjectParameter("area", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddTecnico", nombreParameter, telefonoParameter, areaParameter);
        }
    
        public virtual ObjectResult<spClientesPorServicio_Result> spClientesPorServicio(Nullable<decimal> servicio)
        {
            var servicioParameter = servicio.HasValue ?
                new ObjectParameter("Servicio", servicio) :
                new ObjectParameter("Servicio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spClientesPorServicio_Result>("spClientesPorServicio", servicioParameter);
        }
    
        public virtual int spDeleteCliente(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteCliente", idParameter);
        }
    
        public virtual int spDeleteContrato(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteContrato", idParameter);
        }
    
        public virtual int spDeleteDetalleContrato(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteDetalleContrato", idParameter);
        }
    
        public virtual int spDeleteDetalleFactura(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteDetalleFactura", idParameter);
        }
    
        public virtual int spDeleteDetalleOrdenTrabajo(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteDetalleOrdenTrabajo", idParameter);
        }
    
        public virtual int spDeleteDetallePaquete(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteDetallePaquete", idParameter);
        }
    
        public virtual int spDeleteDisponibilidadTecnico(Nullable<decimal> registroID)
        {
            var registroIDParameter = registroID.HasValue ?
                new ObjectParameter("registroID", registroID) :
                new ObjectParameter("registroID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteDisponibilidadTecnico", registroIDParameter);
        }
    
        public virtual int spDeleteFacturaServicio(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteFacturaServicio", idParameter);
        }
    
        public virtual int spDeleteOrdenTrabajo(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteOrdenTrabajo", idParameter);
        }
    
        public virtual int spDeleteServicios(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteServicios", idParameter);
        }
    
        public virtual int spDeleteTecnico(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteTecnico", idParameter);
        }
    
        public virtual int spFacturaMensual(Nullable<decimal> clienteID, Nullable<decimal> mes)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("clienteID", clienteID) :
                new ObjectParameter("clienteID", typeof(decimal));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("mes", mes) :
                new ObjectParameter("mes", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFacturaMensual", clienteIDParameter, mesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spFacturasMorosas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spFacturasMorosas");
        }
    
        public virtual int spFinalizarOrdenTrabajo(Nullable<decimal> idOrdenTrabajo)
        {
            var idOrdenTrabajoParameter = idOrdenTrabajo.HasValue ?
                new ObjectParameter("idOrdenTrabajo", idOrdenTrabajo) :
                new ObjectParameter("idOrdenTrabajo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFinalizarOrdenTrabajo", idOrdenTrabajoParameter);
        }
    
        public virtual int spReadContrato(Nullable<decimal> contratoID)
        {
            var contratoIDParameter = contratoID.HasValue ?
                new ObjectParameter("contratoID", contratoID) :
                new ObjectParameter("contratoID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReadContrato", contratoIDParameter);
        }
    
        public virtual int spServiciosRealizados(Nullable<decimal> clienteID)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("clienteID", clienteID) :
                new ObjectParameter("clienteID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spServiciosRealizados", clienteIDParameter);
        }
    
        public virtual ObjectResult<spUOWordenTrabajo_Result> spUOWordenTrabajo(Nullable<decimal> cliente, Nullable<decimal> tecnico, Nullable<decimal> servicio, Nullable<int> cantidad, Nullable<decimal> contrato, Nullable<System.DateTime> inicio, Nullable<System.DateTime> final)
        {
            var clienteParameter = cliente.HasValue ?
                new ObjectParameter("cliente", cliente) :
                new ObjectParameter("cliente", typeof(decimal));
    
            var tecnicoParameter = tecnico.HasValue ?
                new ObjectParameter("tecnico", tecnico) :
                new ObjectParameter("tecnico", typeof(decimal));
    
            var servicioParameter = servicio.HasValue ?
                new ObjectParameter("servicio", servicio) :
                new ObjectParameter("servicio", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var contratoParameter = contrato.HasValue ?
                new ObjectParameter("contrato", contrato) :
                new ObjectParameter("contrato", typeof(decimal));
    
            var inicioParameter = inicio.HasValue ?
                new ObjectParameter("inicio", inicio) :
                new ObjectParameter("inicio", typeof(System.DateTime));
    
            var finalParameter = final.HasValue ?
                new ObjectParameter("final", final) :
                new ObjectParameter("final", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUOWordenTrabajo_Result>("spUOWordenTrabajo", clienteParameter, tecnicoParameter, servicioParameter, cantidadParameter, contratoParameter, inicioParameter, finalParameter);
        }
    
        public virtual int spUpdateCliente(Nullable<int> id, string nombre, string estado, string rTN, string telefono, string direccion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var rTNParameter = rTN != null ?
                new ObjectParameter("RTN", rTN) :
                new ObjectParameter("RTN", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateCliente", idParameter, nombreParameter, estadoParameter, rTNParameter, telefonoParameter, direccionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spUpdateContrato(Nullable<decimal> contratoID, Nullable<decimal> clienteID, Nullable<System.DateTime> fechaContrato, Nullable<System.DateTime> fechaFinalizacion, Nullable<decimal> tecnicoID, Nullable<int> retrasos)
        {
            var contratoIDParameter = contratoID.HasValue ?
                new ObjectParameter("contratoID", contratoID) :
                new ObjectParameter("contratoID", typeof(decimal));
    
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("clienteID", clienteID) :
                new ObjectParameter("clienteID", typeof(decimal));
    
            var fechaContratoParameter = fechaContrato.HasValue ?
                new ObjectParameter("fechaContrato", fechaContrato) :
                new ObjectParameter("fechaContrato", typeof(System.DateTime));
    
            var fechaFinalizacionParameter = fechaFinalizacion.HasValue ?
                new ObjectParameter("fechaFinalizacion", fechaFinalizacion) :
                new ObjectParameter("fechaFinalizacion", typeof(System.DateTime));
    
            var tecnicoIDParameter = tecnicoID.HasValue ?
                new ObjectParameter("tecnicoID", tecnicoID) :
                new ObjectParameter("tecnicoID", typeof(decimal));
    
            var retrasosParameter = retrasos.HasValue ?
                new ObjectParameter("retrasos", retrasos) :
                new ObjectParameter("retrasos", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spUpdateContrato", contratoIDParameter, clienteIDParameter, fechaContratoParameter, fechaFinalizacionParameter, tecnicoIDParameter, retrasosParameter);
        }
    
        public virtual int spUpdateDetalleContrato(Nullable<decimal> id, Nullable<decimal> contratoID, Nullable<decimal> servicioID, Nullable<int> cantidad, Nullable<int> realizado)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            var contratoIDParameter = contratoID.HasValue ?
                new ObjectParameter("contratoID", contratoID) :
                new ObjectParameter("contratoID", typeof(decimal));
    
            var servicioIDParameter = servicioID.HasValue ?
                new ObjectParameter("servicioID", servicioID) :
                new ObjectParameter("servicioID", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var realizadoParameter = realizado.HasValue ?
                new ObjectParameter("realizado", realizado) :
                new ObjectParameter("realizado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateDetalleContrato", idParameter, contratoIDParameter, servicioIDParameter, cantidadParameter, realizadoParameter);
        }
    
        public virtual int spUpdateDetalleFactura(Nullable<decimal> id, Nullable<decimal> facturaID, Nullable<double> precio, Nullable<double> isv, Nullable<int> cantidad, Nullable<double> total, Nullable<int> servicio)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            var facturaIDParameter = facturaID.HasValue ?
                new ObjectParameter("facturaID", facturaID) :
                new ObjectParameter("facturaID", typeof(decimal));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(double));
    
            var isvParameter = isv.HasValue ?
                new ObjectParameter("isv", isv) :
                new ObjectParameter("isv", typeof(double));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(double));
    
            var servicioParameter = servicio.HasValue ?
                new ObjectParameter("Servicio", servicio) :
                new ObjectParameter("Servicio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateDetalleFactura", idParameter, facturaIDParameter, precioParameter, isvParameter, cantidadParameter, totalParameter, servicioParameter);
        }
    
        public virtual int spUpdateDetalleOrdenTrabajo(Nullable<decimal> id, Nullable<decimal> ordentrabajoID, Nullable<decimal> tecnicoID, Nullable<decimal> servicioID, Nullable<int> cantidad, Nullable<int> contratoid)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            var ordentrabajoIDParameter = ordentrabajoID.HasValue ?
                new ObjectParameter("ordentrabajoID", ordentrabajoID) :
                new ObjectParameter("ordentrabajoID", typeof(decimal));
    
            var tecnicoIDParameter = tecnicoID.HasValue ?
                new ObjectParameter("tecnicoID", tecnicoID) :
                new ObjectParameter("tecnicoID", typeof(decimal));
    
            var servicioIDParameter = servicioID.HasValue ?
                new ObjectParameter("servicioID", servicioID) :
                new ObjectParameter("servicioID", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var contratoidParameter = contratoid.HasValue ?
                new ObjectParameter("contratoid", contratoid) :
                new ObjectParameter("contratoid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateDetalleOrdenTrabajo", idParameter, ordentrabajoIDParameter, tecnicoIDParameter, servicioIDParameter, cantidadParameter, contratoidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spUpdateDetallePaquete(Nullable<decimal> id, Nullable<decimal> servicioID, Nullable<decimal> paqueteID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            var servicioIDParameter = servicioID.HasValue ?
                new ObjectParameter("ServicioID", servicioID) :
                new ObjectParameter("ServicioID", typeof(decimal));
    
            var paqueteIDParameter = paqueteID.HasValue ?
                new ObjectParameter("PaqueteID", paqueteID) :
                new ObjectParameter("PaqueteID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spUpdateDetallePaquete", idParameter, servicioIDParameter, paqueteIDParameter);
        }
    
        public virtual int spUpdateDisponibilidadTecnico(Nullable<int> id, Nullable<decimal> tecnicoID, string estado, Nullable<System.DateTime> desde, Nullable<System.DateTime> hasta)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var tecnicoIDParameter = tecnicoID.HasValue ?
                new ObjectParameter("tecnicoID", tecnicoID) :
                new ObjectParameter("tecnicoID", typeof(decimal));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var desdeParameter = desde.HasValue ?
                new ObjectParameter("desde", desde) :
                new ObjectParameter("desde", typeof(System.DateTime));
    
            var hastaParameter = hasta.HasValue ?
                new ObjectParameter("hasta", hasta) :
                new ObjectParameter("hasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateDisponibilidadTecnico", idParameter, tecnicoIDParameter, estadoParameter, desdeParameter, hastaParameter);
        }
    
        public virtual int spUpdateFacturaServicio(Nullable<decimal> id, Nullable<System.DateTime> fecha, Nullable<decimal> clienteID, string estado, Nullable<decimal> ordenID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("clienteID", clienteID) :
                new ObjectParameter("clienteID", typeof(decimal));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var ordenIDParameter = ordenID.HasValue ?
                new ObjectParameter("ordenID", ordenID) :
                new ObjectParameter("ordenID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateFacturaServicio", idParameter, fechaParameter, clienteIDParameter, estadoParameter, ordenIDParameter);
        }
    
        public virtual int spUpdateOrdenTrabajo(Nullable<decimal> id, Nullable<decimal> clienteID, Nullable<System.DateTime> fechainicio, Nullable<System.DateTime> fechafinal, string estado)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("clienteID", clienteID) :
                new ObjectParameter("clienteID", typeof(decimal));
    
            var fechainicioParameter = fechainicio.HasValue ?
                new ObjectParameter("fechainicio", fechainicio) :
                new ObjectParameter("fechainicio", typeof(System.DateTime));
    
            var fechafinalParameter = fechafinal.HasValue ?
                new ObjectParameter("fechafinal", fechafinal) :
                new ObjectParameter("fechafinal", typeof(System.DateTime));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateOrdenTrabajo", idParameter, clienteIDParameter, fechainicioParameter, fechafinalParameter, estadoParameter);
        }
    
        public virtual int spUpdateServicios(Nullable<decimal> id, string nombre, Nullable<double> precio, string tipo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(double));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateServicios", idParameter, nombreParameter, precioParameter, tipoParameter);
        }
    
        public virtual int spUpdateTecnico(Nullable<decimal> id, string nombre, string telefono, string area)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(decimal));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("area", area) :
                new ObjectParameter("area", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateTecnico", idParameter, nombreParameter, telefonoParameter, areaParameter);
        }
    
        [DbFunction("DBEntities", "fClientesI")]
        public virtual IQueryable<fClientesI_Result> fClientesI(Nullable<int> clienteID)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fClientesI_Result>("[DBEntities].[fClientesI](@ClienteID)", clienteIDParameter);
        }
    
        [DbFunction("DBEntities", "fDetalleServicioIndividualContratado")]
        public virtual IQueryable<fDetalleServicioIndividualContratado_Result> fDetalleServicioIndividualContratado(Nullable<int> servicioID)
        {
            var servicioIDParameter = servicioID.HasValue ?
                new ObjectParameter("servicioID", servicioID) :
                new ObjectParameter("servicioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fDetalleServicioIndividualContratado_Result>("[DBEntities].[fDetalleServicioIndividualContratado](@servicioID)", servicioIDParameter);
        }
    
        [DbFunction("DBEntities", "fFacturaMensual")]
        public virtual IQueryable<fFacturaMensual_Result> fFacturaMensual(Nullable<int> clienteID)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fFacturaMensual_Result>("[DBEntities].[fFacturaMensual](@ClienteID)", clienteIDParameter);
        }
    
        [DbFunction("DBEntities", "fHorasTrabajoTecnico")]
        public virtual IQueryable<fHorasTrabajoTecnico_Result> fHorasTrabajoTecnico(Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechaFinal)
        {
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("fechaInicio", fechaInicio) :
                new ObjectParameter("fechaInicio", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("fechaFinal", fechaFinal) :
                new ObjectParameter("fechaFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fHorasTrabajoTecnico_Result>("[DBEntities].[fHorasTrabajoTecnico](@fechaInicio, @fechaFinal)", fechaInicioParameter, fechaFinalParameter);
        }
    
        [DbFunction("DBEntities", "fOrdenxCliente")]
        public virtual IQueryable<fOrdenxCliente_Result> fOrdenxCliente(Nullable<int> clienteID, string estado)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fOrdenxCliente_Result>("[DBEntities].[fOrdenxCliente](@ClienteID, @estado)", clienteIDParameter, estadoParameter);
        }
    
        public virtual ObjectResult<spFacturasPorMesDeXCliente_Result> spFacturasPorMesDeXCliente(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFacturasPorMesDeXCliente_Result>("spFacturasPorMesDeXCliente", idParameter);
        }
    }
}
